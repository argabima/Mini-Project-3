// Code generated by mockery v2.20.0. DO NOT EDIT.

package customers

import mock "github.com/stretchr/testify/mock"

// MockControllerInterface is an autogenerated mock type for the ControllerInterface type
type MockControllerInterface struct {
	mock.Mock
}

type MockControllerInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockControllerInterface) EXPECT() *MockControllerInterface_Expecter {
	return &MockControllerInterface_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: req
func (_m *MockControllerInterface) Create(req *CreateRequest) (*CreateResponse, error) {
	ret := _m.Called(req)

	var r0 *CreateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(*CreateRequest) (*CreateResponse, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(*CreateRequest) *CreateResponse); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*CreateResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(*CreateRequest) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockControllerInterface_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockControllerInterface_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - req *CreateRequest
func (_e *MockControllerInterface_Expecter) Create(req interface{}) *MockControllerInterface_Create_Call {
	return &MockControllerInterface_Create_Call{Call: _e.mock.On("Create", req)}
}

func (_c *MockControllerInterface_Create_Call) Run(run func(req *CreateRequest)) *MockControllerInterface_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*CreateRequest))
	})
	return _c
}

func (_c *MockControllerInterface_Create_Call) Return(_a0 *CreateResponse, _a1 error) *MockControllerInterface_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockControllerInterface_Create_Call) RunAndReturn(run func(*CreateRequest) (*CreateResponse, error)) *MockControllerInterface_Create_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteByID provides a mock function with given fields: id
func (_m *MockControllerInterface) DeleteByID(id interface{}) (*DeleteResponse, error) {
	ret := _m.Called(id)

	var r0 *DeleteResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(interface{}) (*DeleteResponse, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(interface{}) *DeleteResponse); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*DeleteResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockControllerInterface_DeleteByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteByID'
type MockControllerInterface_DeleteByID_Call struct {
	*mock.Call
}

// DeleteByID is a helper method to define mock.On call
//   - id interface{}
func (_e *MockControllerInterface_Expecter) DeleteByID(id interface{}) *MockControllerInterface_DeleteByID_Call {
	return &MockControllerInterface_DeleteByID_Call{Call: _e.mock.On("DeleteByID", id)}
}

func (_c *MockControllerInterface_DeleteByID_Call) Run(run func(id interface{})) *MockControllerInterface_DeleteByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *MockControllerInterface_DeleteByID_Call) Return(_a0 *DeleteResponse, _a1 error) *MockControllerInterface_DeleteByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockControllerInterface_DeleteByID_Call) RunAndReturn(run func(interface{}) (*DeleteResponse, error)) *MockControllerInterface_DeleteByID_Call {
	_c.Call.Return(run)
	return _c
}

// Read provides a mock function with given fields:
func (_m *MockControllerInterface) Read() (*ReadResponse, error) {
	ret := _m.Called()

	var r0 *ReadResponse
	var r1 error
	if rf, ok := ret.Get(0).(func() (*ReadResponse, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *ReadResponse); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ReadResponse)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockControllerInterface_Read_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Read'
type MockControllerInterface_Read_Call struct {
	*mock.Call
}

// Read is a helper method to define mock.On call
func (_e *MockControllerInterface_Expecter) Read() *MockControllerInterface_Read_Call {
	return &MockControllerInterface_Read_Call{Call: _e.mock.On("Read")}
}

func (_c *MockControllerInterface_Read_Call) Run(run func()) *MockControllerInterface_Read_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockControllerInterface_Read_Call) Return(_a0 *ReadResponse, _a1 error) *MockControllerInterface_Read_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockControllerInterface_Read_Call) RunAndReturn(run func() (*ReadResponse, error)) *MockControllerInterface_Read_Call {
	_c.Call.Return(run)
	return _c
}

// ReadByID provides a mock function with given fields: id
func (_m *MockControllerInterface) ReadByID(id interface{}) (*ReadByIDResponse, error) {
	ret := _m.Called(id)

	var r0 *ReadByIDResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(interface{}) (*ReadByIDResponse, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(interface{}) *ReadByIDResponse); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ReadByIDResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockControllerInterface_ReadByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadByID'
type MockControllerInterface_ReadByID_Call struct {
	*mock.Call
}

// ReadByID is a helper method to define mock.On call
//   - id interface{}
func (_e *MockControllerInterface_Expecter) ReadByID(id interface{}) *MockControllerInterface_ReadByID_Call {
	return &MockControllerInterface_ReadByID_Call{Call: _e.mock.On("ReadByID", id)}
}

func (_c *MockControllerInterface_ReadByID_Call) Run(run func(id interface{})) *MockControllerInterface_ReadByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *MockControllerInterface_ReadByID_Call) Return(_a0 *ReadByIDResponse, _a1 error) *MockControllerInterface_ReadByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockControllerInterface_ReadByID_Call) RunAndReturn(run func(interface{}) (*ReadByIDResponse, error)) *MockControllerInterface_ReadByID_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateByID provides a mock function with given fields: req, id
func (_m *MockControllerInterface) UpdateByID(req *CreateRequest, id interface{}) (*CreateResponse, error) {
	ret := _m.Called(req, id)

	var r0 *CreateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(*CreateRequest, interface{}) (*CreateResponse, error)); ok {
		return rf(req, id)
	}
	if rf, ok := ret.Get(0).(func(*CreateRequest, interface{}) *CreateResponse); ok {
		r0 = rf(req, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*CreateResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(*CreateRequest, interface{}) error); ok {
		r1 = rf(req, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockControllerInterface_UpdateByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateByID'
type MockControllerInterface_UpdateByID_Call struct {
	*mock.Call
}

// UpdateByID is a helper method to define mock.On call
//   - req *CreateRequest
//   - id interface{}
func (_e *MockControllerInterface_Expecter) UpdateByID(req interface{}, id interface{}) *MockControllerInterface_UpdateByID_Call {
	return &MockControllerInterface_UpdateByID_Call{Call: _e.mock.On("UpdateByID", req, id)}
}

func (_c *MockControllerInterface_UpdateByID_Call) Run(run func(req *CreateRequest, id interface{})) *MockControllerInterface_UpdateByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*CreateRequest), args[1].(interface{}))
	})
	return _c
}

func (_c *MockControllerInterface_UpdateByID_Call) Return(_a0 *CreateResponse, _a1 error) *MockControllerInterface_UpdateByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockControllerInterface_UpdateByID_Call) RunAndReturn(run func(*CreateRequest, interface{}) (*CreateResponse, error)) *MockControllerInterface_UpdateByID_Call {
	_c.Call.Return(run)
	return _c
}

// getByEmail provides a mock function with given fields: email
func (_m *MockControllerInterface) getByEmail(email string) (*getByEmailResponse, error) {
	ret := _m.Called(email)

	var r0 *getByEmailResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*getByEmailResponse, error)); ok {
		return rf(email)
	}
	if rf, ok := ret.Get(0).(func(string) *getByEmailResponse); ok {
		r0 = rf(email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*getByEmailResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockControllerInterface_getByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'getByEmail'
type MockControllerInterface_getByEmail_Call struct {
	*mock.Call
}

// getByEmail is a helper method to define mock.On call
//   - email string
func (_e *MockControllerInterface_Expecter) getByEmail(email interface{}) *MockControllerInterface_getByEmail_Call {
	return &MockControllerInterface_getByEmail_Call{Call: _e.mock.On("getByEmail", email)}
}

func (_c *MockControllerInterface_getByEmail_Call) Run(run func(email string)) *MockControllerInterface_getByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockControllerInterface_getByEmail_Call) Return(_a0 *getByEmailResponse, _a1 error) *MockControllerInterface_getByEmail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockControllerInterface_getByEmail_Call) RunAndReturn(run func(string) (*getByEmailResponse, error)) *MockControllerInterface_getByEmail_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockControllerInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockControllerInterface creates a new instance of MockControllerInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockControllerInterface(t mockConstructorTestingTNewMockControllerInterface) *MockControllerInterface {
	mock := &MockControllerInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
