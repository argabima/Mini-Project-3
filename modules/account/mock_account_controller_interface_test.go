// Code generated by mockery v2.20.0. DO NOT EDIT.

package account

import mock "github.com/stretchr/testify/mock"

// MockAccountControllerInterface is an autogenerated mock type for the AccountControllerInterface type
type MockAccountControllerInterface struct {
	mock.Mock
}

type MockAccountControllerInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAccountControllerInterface) EXPECT() *MockAccountControllerInterface_Expecter {
	return &MockAccountControllerInterface_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: req
func (_m *MockAccountControllerInterface) Create(req *CreateRequest) (*AccountItemResponse, error) {
	ret := _m.Called(req)

	var r0 *AccountItemResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(*CreateRequest) (*AccountItemResponse, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(*CreateRequest) *AccountItemResponse); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*AccountItemResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(*CreateRequest) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountControllerInterface_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockAccountControllerInterface_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - req *CreateRequest
func (_e *MockAccountControllerInterface_Expecter) Create(req interface{}) *MockAccountControllerInterface_Create_Call {
	return &MockAccountControllerInterface_Create_Call{Call: _e.mock.On("Create", req)}
}

func (_c *MockAccountControllerInterface_Create_Call) Run(run func(req *CreateRequest)) *MockAccountControllerInterface_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*CreateRequest))
	})
	return _c
}

func (_c *MockAccountControllerInterface_Create_Call) Return(_a0 *AccountItemResponse, _a1 error) *MockAccountControllerInterface_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountControllerInterface_Create_Call) RunAndReturn(run func(*CreateRequest) (*AccountItemResponse, error)) *MockAccountControllerInterface_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Login provides a mock function with given fields: req
func (_m *MockAccountControllerInterface) Login(req *LoginRequest) (*LoginResponse, error) {
	ret := _m.Called(req)

	var r0 *LoginResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(*LoginRequest) (*LoginResponse, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(*LoginRequest) *LoginResponse); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*LoginResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(*LoginRequest) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountControllerInterface_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type MockAccountControllerInterface_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
//   - req *LoginRequest
func (_e *MockAccountControllerInterface_Expecter) Login(req interface{}) *MockAccountControllerInterface_Login_Call {
	return &MockAccountControllerInterface_Login_Call{Call: _e.mock.On("Login", req)}
}

func (_c *MockAccountControllerInterface_Login_Call) Run(run func(req *LoginRequest)) *MockAccountControllerInterface_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*LoginRequest))
	})
	return _c
}

func (_c *MockAccountControllerInterface_Login_Call) Return(_a0 *LoginResponse, _a1 error) *MockAccountControllerInterface_Login_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountControllerInterface_Login_Call) RunAndReturn(run func(*LoginRequest) (*LoginResponse, error)) *MockAccountControllerInterface_Login_Call {
	_c.Call.Return(run)
	return _c
}

// ReadByUsername provides a mock function with given fields: username
func (_m *MockAccountControllerInterface) ReadByUsername(username string) (*ReadByUsernameResponse, error) {
	ret := _m.Called(username)

	var r0 *ReadByUsernameResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*ReadByUsernameResponse, error)); ok {
		return rf(username)
	}
	if rf, ok := ret.Get(0).(func(string) *ReadByUsernameResponse); ok {
		r0 = rf(username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ReadByUsernameResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountControllerInterface_ReadByUsername_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadByUsername'
type MockAccountControllerInterface_ReadByUsername_Call struct {
	*mock.Call
}

// ReadByUsername is a helper method to define mock.On call
//   - username string
func (_e *MockAccountControllerInterface_Expecter) ReadByUsername(username interface{}) *MockAccountControllerInterface_ReadByUsername_Call {
	return &MockAccountControllerInterface_ReadByUsername_Call{Call: _e.mock.On("ReadByUsername", username)}
}

func (_c *MockAccountControllerInterface_ReadByUsername_Call) Run(run func(username string)) *MockAccountControllerInterface_ReadByUsername_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockAccountControllerInterface_ReadByUsername_Call) Return(_a0 *ReadByUsernameResponse, _a1 error) *MockAccountControllerInterface_ReadByUsername_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountControllerInterface_ReadByUsername_Call) RunAndReturn(run func(string) (*ReadByUsernameResponse, error)) *MockAccountControllerInterface_ReadByUsername_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockAccountControllerInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockAccountControllerInterface creates a new instance of MockAccountControllerInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockAccountControllerInterface(t mockConstructorTestingTNewMockAccountControllerInterface) *MockAccountControllerInterface {
	mock := &MockAccountControllerInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
