// Code generated by mockery v2.20.0. DO NOT EDIT.

package account

import mock "github.com/stretchr/testify/mock"

// MockAccountRepoInterface is an autogenerated mock type for the AccountRepoInterface type
type MockAccountRepoInterface struct {
	mock.Mock
}

type MockAccountRepoInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAccountRepoInterface) EXPECT() *MockAccountRepoInterface_Expecter {
	return &MockAccountRepoInterface_Expecter{mock: &_m.Mock}
}

// FindByUsername provides a mock function with given fields: username
func (_m *MockAccountRepoInterface) FindByUsername(username string) (Actors, error) {
	ret := _m.Called(username)

	var r0 Actors
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (Actors, error)); ok {
		return rf(username)
	}
	if rf, ok := ret.Get(0).(func(string) Actors); ok {
		r0 = rf(username)
	} else {
		r0 = ret.Get(0).(Actors)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountRepoInterface_FindByUsername_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByUsername'
type MockAccountRepoInterface_FindByUsername_Call struct {
	*mock.Call
}

// FindByUsername is a helper method to define mock.On call
//   - username string
func (_e *MockAccountRepoInterface_Expecter) FindByUsername(username interface{}) *MockAccountRepoInterface_FindByUsername_Call {
	return &MockAccountRepoInterface_FindByUsername_Call{Call: _e.mock.On("FindByUsername", username)}
}

func (_c *MockAccountRepoInterface_FindByUsername_Call) Run(run func(username string)) *MockAccountRepoInterface_FindByUsername_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockAccountRepoInterface_FindByUsername_Call) Return(_a0 Actors, _a1 error) *MockAccountRepoInterface_FindByUsername_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountRepoInterface_FindByUsername_Call) RunAndReturn(run func(string) (Actors, error)) *MockAccountRepoInterface_FindByUsername_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function with given fields: account
func (_m *MockAccountRepoInterface) Save(account *Actors) error {
	ret := _m.Called(account)

	var r0 error
	if rf, ok := ret.Get(0).(func(*Actors) error); ok {
		r0 = rf(account)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAccountRepoInterface_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type MockAccountRepoInterface_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - account *Actors
func (_e *MockAccountRepoInterface_Expecter) Save(account interface{}) *MockAccountRepoInterface_Save_Call {
	return &MockAccountRepoInterface_Save_Call{Call: _e.mock.On("Save", account)}
}

func (_c *MockAccountRepoInterface_Save_Call) Run(run func(account *Actors)) *MockAccountRepoInterface_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*Actors))
	})
	return _c
}

func (_c *MockAccountRepoInterface_Save_Call) Return(_a0 error) *MockAccountRepoInterface_Save_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAccountRepoInterface_Save_Call) RunAndReturn(run func(*Actors) error) *MockAccountRepoInterface_Save_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockAccountRepoInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockAccountRepoInterface creates a new instance of MockAccountRepoInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockAccountRepoInterface(t mockConstructorTestingTNewMockAccountRepoInterface) *MockAccountRepoInterface {
	mock := &MockAccountRepoInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
