// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	account "crm_service/modules/account"

	mock "github.com/stretchr/testify/mock"
)

// AccountControllerInterface is an autogenerated mock type for the AccountControllerInterface type
type AccountControllerInterface struct {
	mock.Mock
}

type AccountControllerInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *AccountControllerInterface) EXPECT() *AccountControllerInterface_Expecter {
	return &AccountControllerInterface_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: req
func (_m *AccountControllerInterface) Create(req *account.CreateRequest) (*account.AccountItemResponse, error) {
	ret := _m.Called(req)

	var r0 *account.AccountItemResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(*account.CreateRequest) (*account.AccountItemResponse, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(*account.CreateRequest) *account.AccountItemResponse); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*account.AccountItemResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(*account.CreateRequest) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AccountControllerInterface_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type AccountControllerInterface_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - req *account.CreateRequest
func (_e *AccountControllerInterface_Expecter) Create(req interface{}) *AccountControllerInterface_Create_Call {
	return &AccountControllerInterface_Create_Call{Call: _e.mock.On("Create", req)}
}

func (_c *AccountControllerInterface_Create_Call) Run(run func(req *account.CreateRequest)) *AccountControllerInterface_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*account.CreateRequest))
	})
	return _c
}

func (_c *AccountControllerInterface_Create_Call) Return(_a0 *account.AccountItemResponse, _a1 error) *AccountControllerInterface_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AccountControllerInterface_Create_Call) RunAndReturn(run func(*account.CreateRequest) (*account.AccountItemResponse, error)) *AccountControllerInterface_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Login provides a mock function with given fields: req
func (_m *AccountControllerInterface) Login(req *account.LoginRequest) (*account.LoginResponse, error) {
	ret := _m.Called(req)

	var r0 *account.LoginResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(*account.LoginRequest) (*account.LoginResponse, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(*account.LoginRequest) *account.LoginResponse); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*account.LoginResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(*account.LoginRequest) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AccountControllerInterface_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type AccountControllerInterface_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
//   - req *account.LoginRequest
func (_e *AccountControllerInterface_Expecter) Login(req interface{}) *AccountControllerInterface_Login_Call {
	return &AccountControllerInterface_Login_Call{Call: _e.mock.On("Login", req)}
}

func (_c *AccountControllerInterface_Login_Call) Run(run func(req *account.LoginRequest)) *AccountControllerInterface_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*account.LoginRequest))
	})
	return _c
}

func (_c *AccountControllerInterface_Login_Call) Return(_a0 *account.LoginResponse, _a1 error) *AccountControllerInterface_Login_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AccountControllerInterface_Login_Call) RunAndReturn(run func(*account.LoginRequest) (*account.LoginResponse, error)) *AccountControllerInterface_Login_Call {
	_c.Call.Return(run)
	return _c
}

// ReadByUsername provides a mock function with given fields: username
func (_m *AccountControllerInterface) ReadByUsername(username string) (*account.ReadByUsernameResponse, error) {
	ret := _m.Called(username)

	var r0 *account.ReadByUsernameResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*account.ReadByUsernameResponse, error)); ok {
		return rf(username)
	}
	if rf, ok := ret.Get(0).(func(string) *account.ReadByUsernameResponse); ok {
		r0 = rf(username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*account.ReadByUsernameResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AccountControllerInterface_ReadByUsername_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadByUsername'
type AccountControllerInterface_ReadByUsername_Call struct {
	*mock.Call
}

// ReadByUsername is a helper method to define mock.On call
//   - username string
func (_e *AccountControllerInterface_Expecter) ReadByUsername(username interface{}) *AccountControllerInterface_ReadByUsername_Call {
	return &AccountControllerInterface_ReadByUsername_Call{Call: _e.mock.On("ReadByUsername", username)}
}

func (_c *AccountControllerInterface_ReadByUsername_Call) Run(run func(username string)) *AccountControllerInterface_ReadByUsername_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *AccountControllerInterface_ReadByUsername_Call) Return(_a0 *account.ReadByUsernameResponse, _a1 error) *AccountControllerInterface_ReadByUsername_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AccountControllerInterface_ReadByUsername_Call) RunAndReturn(run func(string) (*account.ReadByUsernameResponse, error)) *AccountControllerInterface_ReadByUsername_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewAccountControllerInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewAccountControllerInterface creates a new instance of AccountControllerInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAccountControllerInterface(t mockConstructorTestingTNewAccountControllerInterface) *AccountControllerInterface {
	mock := &AccountControllerInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
