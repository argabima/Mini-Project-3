// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	account "crm_service/modules/account"

	mock "github.com/stretchr/testify/mock"
)

// AccountUsecaseInterface is an autogenerated mock type for the AccountUsecaseInterface type
type AccountUsecaseInterface struct {
	mock.Mock
}

type AccountUsecaseInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *AccountUsecaseInterface) EXPECT() *AccountUsecaseInterface_Expecter {
	return &AccountUsecaseInterface_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: _a0
func (_m *AccountUsecaseInterface) Create(_a0 *account.Actors) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*account.Actors) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AccountUsecaseInterface_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type AccountUsecaseInterface_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - _a0 *account.Actors
func (_e *AccountUsecaseInterface_Expecter) Create(_a0 interface{}) *AccountUsecaseInterface_Create_Call {
	return &AccountUsecaseInterface_Create_Call{Call: _e.mock.On("Create", _a0)}
}

func (_c *AccountUsecaseInterface_Create_Call) Run(run func(_a0 *account.Actors)) *AccountUsecaseInterface_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*account.Actors))
	})
	return _c
}

func (_c *AccountUsecaseInterface_Create_Call) Return(_a0 error) *AccountUsecaseInterface_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AccountUsecaseInterface_Create_Call) RunAndReturn(run func(*account.Actors) error) *AccountUsecaseInterface_Create_Call {
	_c.Call.Return(run)
	return _c
}

// getByUsername provides a mock function with given fields: username
func (_m *AccountUsecaseInterface) getByUsername(username string) (account.Actors, error) {
	ret := _m.Called(username)

	var r0 account.Actors
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (account.Actors, error)); ok {
		return rf(username)
	}
	if rf, ok := ret.Get(0).(func(string) account.Actors); ok {
		r0 = rf(username)
	} else {
		r0 = ret.Get(0).(account.Actors)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AccountUsecaseInterface_getByUsername_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'getByUsername'
type AccountUsecaseInterface_getByUsername_Call struct {
	*mock.Call
}

// getByUsername is a helper method to define mock.On call
//   - username string
func (_e *AccountUsecaseInterface_Expecter) getByUsername(username interface{}) *AccountUsecaseInterface_getByUsername_Call {
	return &AccountUsecaseInterface_getByUsername_Call{Call: _e.mock.On("getByUsername", username)}
}

func (_c *AccountUsecaseInterface_getByUsername_Call) Run(run func(username string)) *AccountUsecaseInterface_getByUsername_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *AccountUsecaseInterface_getByUsername_Call) Return(_a0 account.Actors, _a1 error) *AccountUsecaseInterface_getByUsername_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AccountUsecaseInterface_getByUsername_Call) RunAndReturn(run func(string) (account.Actors, error)) *AccountUsecaseInterface_getByUsername_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewAccountUsecaseInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewAccountUsecaseInterface creates a new instance of AccountUsecaseInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAccountUsecaseInterface(t mockConstructorTestingTNewAccountUsecaseInterface) *AccountUsecaseInterface {
	mock := &AccountUsecaseInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
